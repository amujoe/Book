{"./":{"url":"./","title":"Introduction","keywords":"","body":"用 gitbook 写了一个前端手册 npm run serve Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/other/first.html":{"url":"src/other/first.html","title":"写在开头","keywords":"","body":"写在开头 这里是一个屌丝 Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/miniprogram/mini00.html":{"url":"src/miniprogram/mini00.html","title":"小程序到那些事","keywords":"","body":"小程序开发 对于一个前端来说, 没有开发过小程序, 确实很过分 Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/miniprogram/mini01.html":{"url":"src/miniprogram/mini01.html","title":"模版消息升级","keywords":"","body":"wx.requestSubscribeMessage 小程序模版消息升级为订阅消息 在这个寒冷的冬日里, 你是否也因小程序模版消息升级为订阅消息而苦逼? 端起你的枸杞菊花茶, 边喝边看 还要从那不久前的炎炎夏日说起, 一位苦逼的前端小妹, 为了加模版消息,熬了好几个加班夜, 动了几十个页面, 修改了几百个按钮, 终于把模版消息都全面埋雷, 不留任何死角. 也就过了才 1 2 3 4 5个月吧, 订阅消息一出. 我们的前端小妹, 那脸色、那眼神、我至今找不到一个合适的词语来形容(主要是笔者词穷) 下面还是主要来说说订阅消息吧, 不然对不起读者. 升级第一步: 注意订阅消息是有最低版本库要求的 (这个主要是需要产品和客户同步, 不是所有人都能订阅哦) 注意：iOS客户端7.0.6版本、Android客户端7.0.7版本之后的一次性订阅/长期订阅才支持多个模板消息，iOS客户端7.0.5版本、Android客户端7.0.6版本之前的一次订阅只支持一个模板消息 升级第二步: 干就完了 官方 api 地址: https://developers.weixin.qq.com/miniprogram/dev/api/open-api/subscribe-message/wx.requestSubscribeMessage.html 撸起袖子就是干 小手一抖, 代码全有 屏幕一点, 效果立显 友情提示: 这里 tmplIds 用的是订阅消息 id 哦, 不要搞错咯 这里必须是在手机上才能看到效果哦 每次弹框, 只能配置最多 3 个订阅消息哦 如果勾选了: “总是保持以上选择, 不再询问” , 真的就是“此生不复相见哦”, 删除了小程序也不管用哦 由于弹出的 3 个订阅消息, 是可以单独勾选, 就会出现如果某 1 个配置的已经“总是保持以上选择, 不再询问”. 那么弹框只会显示其他两个哦, 属于正常情况. 不要以为是哪里错了哈. 并且返回的结果还是 3 个(不要晕哈, 说的啰嗦, 其实不难理解) 小框框弹出来了, 返回也很顺利拿到了, 抿一口手边的枸杞菊花茶, 是不是很舒服? 上面说到了, “总是保持以上选择, 不再询问” , 就是“此生不复相见哦”, 那么如果之前手贱, 点了拒绝. 那如何才能重新订阅呢? 小生也是研究了的: 操作步骤: 右上角点点点, 》 设置 》订阅消息 效果一目了然 前方高能: 设置里的订阅消息, 它此生的标签是 “总是保持以上选择, 不再询问”, 不管是你允许还是拒绝, 都不会在弹框里再看到 写在最后 提一个更苦逼的事情, 记得把之前为获取 formid 而写的代码, 统统删掉 写在最最后 给不给点赞? 不点我下一篇还问 未完待续… 以下是补充哦, 持续关注订阅消息 一: 一个模版, 在首页勾选了“总是保持以上选择, 不再询问”按钮. 在别的页面也将不会有弹框. 你懂的, 在产品角度这个是很重要、很关键的交互需求 二: 同意次数是可以累计的. 也就是说, 一个模版, 客户A点击了 10 次允许发送消息. 那我们就可以给他发 10 次模版消息提醒 三: 一次拒绝, 是不会清除之前同意所累计的次数的 这个是针对有网友说: “点一次同意, 再点击一次拒绝,是收不到消息的”. 实践证明: 点一次同意, 就能发一次消息, 后面点击拒绝, 不影响之前点击同意的 四: 有网友问: ”一个弹框有三个模版, 全都勾选并同意. 可以发几条消息? “ 很明显是三个模版每个可以发一次. 这个也是验证了的 干活!! 是不是满满的都是干活! 原文地址 Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/miniprogram/mini02.html":{"url":"src/miniprogram/mini02.html","title":"分享朋友圈","keywords":"","body":"onShareAppMessage 从分享朋友到分享朋友圈 onShareTimeline, 踩坑之旅 艳阳高照 和风细雨的日子里, 你是否也为分享朋友圈如何传参而焦虑烦躁? 端起你的枸杞菊花茶, 边喝边看 我们厂也是混微信生态的, 大厂有个风吹草动的, 我们就要立马操练起来! 前端时间分享朋友圈刚发了个beta版, 我们总部的产品大佬, 立马致电远在西部的开发部门, 干! 立马! 明天上线!!! (GNMA!G, 灵魂相同的开发们才能看懂) 还能说点啥呢? 以上是瞎扯淡, 以下面是干活: 为你提供方便: 接口文档: https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share-timeline.html 页面问答: https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onShareTimeline 限制文档: https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/share-timeline.html#%E5%8D%95%E9%A1%B5%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E9%99%90%E5%88%B6 文档一定要看, 一遍不行, 再来一遍! 第一步: 实现分享朋友圈 前置条件: 直接上代码: 找一步安卓手机, 扫码立显; 做为一个前端小菜, 我脚的走到这步, 应该木有一丁点儿问题! 如果你实现不出来, 那就回归到田野般的生活中找找赶脚 第二步: 踩坑 每次出来个新功能, 实现的道路上总是坑坑洼洼, 我就想问一问, 坐在腾讯大楼喝着菊花枸杞的小伙伴, 程序员何苦为难程序员? (文档写的好一点能si吗?) 大家一直关注的如何传参问题: 传参数方式是酱紫的: 代码是酱紫的: 接收参数: onLoad(option) , 直接就可以拿到参数对象, 点一点就就出来, 亲测可用. 第二步: 场景值 众所周知, 分享的页面, 在朋友圈打开是“单页面模式”, 那就收到以下限制: 需要开发且记且珍惜. 可以根据场景值来判断页面来源 未完待续, 有任何问题都可以找留言(包括如何找对象) Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/miniprogram/mini04.html":{"url":"src/miniprogram/mini04.html","title":"小程序 tabbar 页面建议用缓存","keywords":"","body":"建议小程序 tabbar 页面数据做缓存 废话不多说, 客官进到这里都是来找干货的 数据缓存解决问题: 加载页面时, 先请求数据, 在渲染页面, 页面就会有短暂的闪屏, // 当然第一次加载除外 解决方案: 1. onShow 请求接口前, 先拿取缓存 2. onShow 请求接口, 返回的数据, 在赋值的同时写入缓存 注: 缓存里名字都大写* 存要异步存 (必须)* 取要同步取 (不是必须)* 代码示例: 1. 请求接口, 返回的数据, 在赋值的同时写入缓存 缓存大法固然好, 也不能滥用, 下面是官方文案: 将数据存储在本地缓存中指定的 key 中。会覆盖掉原来该 key 对应的内容。数据存储生命周期跟小程序本身一致，即除用户主动删除或超过一定时间被自动清理，否则数据都一直可用。单个 key 允许存储的最大数据长度为 1MB，所有数据存储上限为 10MB。 开发小伙伴要合理运用哦 原文链接 Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/miniprogram/mini03.html":{"url":"src/miniprogram/mini03.html","title":"小程序单页面自定义导航栏","keywords":"","body":"miniprogram 小程序之单页面自定义导航栏 写在开始 自定义导航栏一直都是一个刚需, 相信微信也是在我们抱怨声中, 下定决心开放这一功能. 全局自定义导航栏, 不多说. 心累 今天的主角是: 单页面自定义导航栏 弄(neng)就完了 配置方法, 我这里对比着说: 全局自定义导航栏配置: 版本要求: ​ 调试基础库>=1.9.0 ​ 微信客户端>=6.6.0 操作: ​ app.json window 增加 \"navigationStyle\":\"custom\"，所有页面导航栏就消失了 单页面自定义导航栏配置: 版本要求: ​ 调试基础库>=2.4.3 ​ 微信客户端版本>=7.0.0 操作: ​ 自定义的页面.json 配置 \"navigationStyle\":\"custom\", 当前页的导航栏就消失了 请注意 请注意: 微信自然是考虑到兼容问题, 如果版本不够新(为什么会有不升级微信的人呢? 值得反思), 就会展示默认的导航栏, 所以 \"navigationBarTitleText\": \"我最帅\", 还是要设置的, 在判断是低版本的时候, 也要把自定义的隐藏哦. 切记! 不要忽视低版本用户, 可能你老板就在内哦 是不是很简单? 是不是很高兴? 是不是觉得就这么搞定了? 有木有发现页面滚动的时候, wifi 图标、时间、电量等状态栏都压在页面上了. 丑不丑? 你这样弄(neng) , 设计妹子愿意吗? 刘海屏也是风靡一时, 有木有照顾到刘海屏手机的用户勒? 不考虑? 如果你女朋友就是刘海屏呢? 不撕烂你的嘴 追求完美 我们都是有追求的猿类, 自然是要照顾设计妹子感受, 也好安抚刘海屏客户的情绪 这里是重点: wx.getSystemInfoSync() 客户获取到手机到型号、系统、微信版本、基础库版本、以及手机状态栏高度 微信版本、基础库版本 为了判断是否支持单页面自定义设置导航 手机状态栏高度 为了兼容刘海屏手机 到这里, 所有招数都已经传授完毕, 能修行到什么地步, 还要看你内功高不高了, 高人请转身, 菜鸟继续蹲 以下就是代码思路了, 请收起你们的搬砖. 设置配置文件 自定义导航栏组件 app.js 获取手机型号, 判断是否展示自定义菜单, 并兼容刘海屏, 当前页显示隐藏自定义导航栏 效果展示 ​ 当前页面json 设置配置文件 自定义导航栏组件 wxml js app.js 获取手机型号, 判断是否展示自定义菜单, 并兼容刘海屏, 当前页显示隐藏自定义导航栏 wxml js 效果展示 ​ 此处有个二维码 Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/miniprogram/mini05.html":{"url":"src/miniprogram/mini05.html","title":"分包加载","keywords":"","body":"小程序分包加载 背景音: - 随着开发功能越来越多, 小程序初次加载速度实在是吃力. 万般煎熬之迹, 只听晴天霹雳一声巨响, 腾讯那小子放了一个大招, 针对小程序做了文件大小限制做了升级. 分包也就此诞生 环境要求: - 微信 6.6 客户端，1.7.3 及以上基础库开始支持，请更新至最新客户端版本，开发者工具请使用 1.01.1712150 及以上版本 在下左木子, 接下来给大家讲解如何运用分包. 废话不多说, 咱看图! 保你看完明明白白: 没明白了吗? 不明白再看一遍 哈哈哈 还不明白的就戳这里, 用评论砸我 Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/git/git00.html":{"url":"src/git/git00.html","title":"git","keywords":"","body":"git - 属于我自己的指北手册 现在 git 一个工程师必备的技能 以前的工作中用的基本都是 SVN 版本管理工具，但随着潮流的趋势发展越多的人加入 Git 之流。最近待业在家，也追一追热潮。 SVN 和 Git 有什么区别呢？前者事集中式的版本管理工具，后者是分布式版本控制系统，这应该也是最核心的区别吧。最大的优点呢，我用最简单的方式来形容：如果公司用的是前者，那你每次工作都必须跑到公司去，后者你就可以在家或者找个环境优雅的咖啡厅办公。 当然本篇不是来探讨 SVN 和 Git 的区别，以上也仅代表我个人的一些见解。下面是我的学习笔记： 指北手册 Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/git/git01.html":{"url":"src/git/git01.html","title":"指北手册","keywords":"","body":"git - 属于我自己的指北手册 现在 git 一个工程师必备的技能 以前的工作中用的基本都是 SVN 版本管理工具，但随着潮流的趋势发展越多的人加入 Git 之流。最近待业在家，也追一追热潮。 SVN 和 Git 有什么区别呢？前者事集中式的版本管理工具，后者是分布式版本控制系统，这应该也是最核心的区别吧。最大的优点呢，我用最简单的方式来形容：如果公司用的是前者，那你每次工作都必须跑到公司去，后者你就可以在家或者找个环境优雅的咖啡厅办公。 当然本篇不是来探讨 SVN 和 Git 的区别，以上也仅代表我个人的一些见解。下面是我的学习笔记： 工作流 你的本地仓库, 其实有三个“区域”组成: 第一个是你的工作区, 就是你的工作目录, 是持有实际的文件 第二个是 git 的暂存区, 是你 git add 以后, 就会存在暂存区 第三个是 HEAD 区, 它指向你最后一次提交的commit 分支的意义 分支是将不同特性的代码分开来的. 在你创建仓库的时候, 有一个默认的分支 master, 在你开发的时候, 会有其他的分支(关于不同分支的命名规范, 可以点这里) , 开发完成以后, 再把它合并到 master 分支. 以下是一些常用的命令, 你必须熟记于心 创建仓库 创建新文件夹，打开，然后执行以下命令, 以创建新的 git 仓库 git init 检出仓库 执行如下命令以创建一个本地仓库的克隆版本 git clone /path/to/repository 如果是远端服务器上的仓库，你的命令会是这个样子 git clone https://github.com/amujoe/management-frame.git 创建一个新的分支, 并切换过去 // 创建新的分支 git checkout -b feature/v1.0.0 // 切换到分支 git checkout feature/v1.0.0 添加、提交 完成一部分代码功能后, 你需要及时的提交更改. 可以用以下命令: git add 或者直接 git add . / git add * 以上操作是提交代码到暂存区, 使用如下命令以实际提交改动: git commit -m \"改动代码的备注\" 也可以添加、提交一起操作 git commit -am \"改动代码的备注\" 现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库. 合并 假如要把代码合并到 master. 先切换到 master 分支. 执行以下代码 git merge feature/v1.0.0 也可以执行 git rebase feature/v1.0.0 要问 merge 和 rebase 的区别. 前者会把差异的 commit 节点按照时间顺序穿插合并. 后者会把 feature/v1.0.0 分支差异的节点, 都排到 master 分支的最后进行合并. 推送改动 执行如下命令以将这些改动提交到远端仓库: git push origin 分支名 更新 第二天来开发时, 首先要更新远程代码到本地, 可以执行以下命令: git pull origin feature/v1.0.0 或者 git fetch origin feature/v1.0.0 区别: 如果你在A分支, 想更新A分支, 你需要用 git pull 如果你在A分支, 想更新B分支, 你需要用 git fetch git pull 相等于先 git fetch 然后 git merge Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/git/git02.html":{"url":"src/git/git02.html","title":"分支命名、推送","keywords":"","body":"git 命名规则、分支管理、提交流程 写给此时凌乱的你 git 现时代做前端必备的技能了。只会简单 add commit 是可以临时应付一下工作，如果进行稍微有点规模的项目，多项功能并行开发，多个bug 都必须同时修复上线，你会发现你的工作流越来越乱。 俗话说：无规矩不成方圆。所以在做开发时候有一套团队的 git flow 还是比较重要的！ 近期我就在做这样的事，如果你也在做，不妨一起聊聊，不同的角度会碰撞出更漂酿的火花。 让我们进入主题： 今天重点要解决的是两个问题： 1. 代码分支管理 2. 提交流程 简单目录： 一： 命名规范 二： 分支由来 三： 代码推送-feature 四： 代码推送-hotfix 五：开发 Vs 修bug # 命名规范 先说说我们分支命名规范：（如下图）。 是在每个成员心中埋下一个伏笔， 以后就可以根据命名，来判断一个分支是用来开发新功能的，还是在修改 bug。 # 分支由来 命名规范有了，接下来聊聊每一分支的由来： ​ master 是石头缝里蹦出来的 ​ develop 是 master 的长子 ​ feature / coding01 每次新功能开发都是从由 develop 切出来的新分支 ​ hotfix / coding01 每次修改线上 bug 都直接从 master 切一个新分支 # 代码推送-feature 功能开发分支 （ feature / coding01 ）代码推送流程： 本地多人开发，必须都把 topic 分支代码合并到 feature 分支 然后推送 test / dev 进行发布测试， 测试 ok 之后，合并到 develop 分支等待上线。 上线之时，负责人合并 develop 代码到 master 上线 # 代码推送-hotfix 修复完 Bug ，合并到 test / dev 测试 测试完成后直接推送到 master 发布 并同步给 develop ，（为了在开发新功能到时候，不用在出现老 Bug） # 开发vs修bug 对比 feature 和 hotfix 分支的推送流程 # 写在最后 对于命名规则、分支管理、提交流程, 你了解了吗? 还有什么疑问吗? 欢迎一起讨论请移步我的博客 Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/git/git03.html":{"url":"src/git/git03.html","title":"深入浅出四大环境","keywords":"","body":"深入浅出dev、test、pre、pro四大环境 今天给大家介绍一下开发过程中，四个环境以及各自的功能特点，四个环境分别是：pro、pre、test、dev环境，中文名字：生产环境、灰度环境、测试环境、开发环境，其实大家看英文应该就差不多可以看出来对应的是什么环境。 环境介绍 pro环境：生产环境，面向外部用户的环境，连接上互联网即可访问的正式环境。 pre环境：灰度环境，外部用户可以访问，但是服务器配置相对低，其它和生产一样。 test环境：测试环境，外部用户无法访问，专门给测试人员使用的，版本相对稳定。 dev环境：开发环境，外部用户无法访问，开发人员使用，版本变动很大。 分不同环境原因 大多数人都知道四个环境指的是什么，但是很多人却不知道为什么要这么区别，甚至为了省事就只有dev和pro环境。如果项目没有上线之前没有问题，如果项目上线之后就会有非常麻烦的事情发生。下面我们针对这四种环境，来分析一下对应的各种场景。 接下来 ... 接下来 ... 接下来 ... 接下来, 请看官点击这里去看全文 Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/vue/vue3-01.html":{"url":"src/vue/vue3-01.html","title":"vue3.0","keywords":"","body":"vue3.0 一个质变, 是一种飞跃. 哦! 不要太刺激咯 先来看看作者自己认为 3.0 的一些亮点: Performance：性能更比Vue 2.0强。 Tree shaking support：可以将无用模块“剪辑”，仅打包需要的。 Composition API：组合API Fragment, Teleport, Suspense：“碎片”，Teleport即Protal传送门，“悬念” Better TypeScript support：更优秀的Ts支持 Custom Renderer API：暴露了自定义渲染API Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/markdown/md01.html":{"url":"src/markdown/md01.html","title":"markdown","keywords":"","body":"什么是 MarkDown ? Markdown是一种极简的『标记语言』，将文本转为HTML，通常为我大码农所用。其不追求大而全，简洁至上，正所谓不求最贵，只求最好！ 它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。 常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说 使用 Markdown 的优点 专注你的文字内容而不是排版样式，安心写作。 轻松的导出 HTML、PDF 和本身的 .md 文件。 纯文本内容，兼容所有的文本编辑器与字处理软件。 随时修改你的文章版本，不必像字处理软件生成若干文件版本导致混乱。 可读、直观、学习成本低。 Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/markdown/md02.html":{"url":"src/markdown/md02.html","title":"基础语法","keywords":"","body":"MarkDown 的基础语法 标题 标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。 # h1 一级标题 ## h2 二级标题 ### h3 三级标题 #### h4 四级标题 ##### h5 五级标题 ###### h6 六级标题 普通文字 示例: h1 一级标题 h2 二级标题 h3 三级标题 h4 四级标题 h5 五级标题 h6 六级标题 普通文字 列表 熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加 1.2.3. 符号要和文字之间加上一个字符的空格。 - 列表1 - 列表2 - 列表2.1 - 列表3 * 列表1 * 列表2 列表2.1 * 列表3 展示效果: 列表1 列表2 列表2.1 列表3 列表1 列表2 列表2.1 列表3 引用 如果你需要引用一小段别处的句子，那么就要用引用的格式。 例如这样 只需要在文本前加入 > 这种尖括号（大于号）即可 超文本 插入链接与插入图片的语法很像，区别在一个 !号 [作者的博客](http://www.amujoe.top) ![作者的微信](http://) 作者的博客 代码 片段的代码可以用反引号给包起来, 如 code `code` 片段的代码可以用反引号给包起来 let code = “这里是一段代码” Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/markdown/md03.html":{"url":"src/markdown/md03.html","title":"表格","keywords":"","body":"MarkDown 的进阶使用 表格 表格是我觉得 Markdown 比较累人的地方，例子如下： | Tables | Are | Cool | | ------------- |:-------------:| -----:| | col 3 is | right-aligned | $1600 | | col 2 is | centered | $12 | | zebra stripes | are neat | $1 | 示例: Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 代码框 如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown 下实现也非常简单，只需要用两个 ` 把中间的代码包裹起来，如 code。 let start = \"hello world!\" function sayHi (name) { console.log(\"hi\" + name) } sayHi(\"amujoe\") 分割线 分割线的语法只需要另起一行，连续输入三个星号 *** 即可。 示例: 总结 Markdown 的基本语法在日常的使用中基本就没什么大问题了，只要多加练习，配合好用的工具，写起东西来肯定会行云流水 Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/web/web01.html":{"url":"src/web/web01.html","title":"搭建网站","keywords":"","body":"搭建网站 为什么要搭建网站? 如何搭建一个 markdown 网站 Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/web/gitbook/gitbook01.html":{"url":"src/web/gitbook/gitbook01.html","title":"gitbook 搭建博客","keywords":"","body":"gitbook 一个让你轻轻松松搭建电子书的工具 初始化 插件 plugins 在book.json中添加\"plugins\"和\"pluginConfig\"字段。 plugins 配置插件 pluginConfig 配置插件的属性 其中\"-search\"中的 - 符号代表去除默认自带的插件 Gitbook默认自带有5个插件： highlight： 代码高亮 search： 导航栏查询功能（不支持中文） sharing：右上角分享功能 font-settings：字体设置（最上方的\"A\"符号） livereload：为GitBook实时重新加载 back-to-top-button 回到顶部 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-chapter-fold，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） # chapter-fold 导航目录折叠 注意: 想要折叠目录, summary.md 必须如下 code 代码添加行号&复制按钮 copy-code-button 代码复制按钮 github 在右上角添加github图标 { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/zhangjikai\" } } } splitter 侧边栏宽度可调节 { \"plugins\": [ \"splitter\" ] } 示例: tbfed-pagefooter 页面添加页脚（简单的） { \"plugins\": [ \"tbfed-pagefooter\" ], \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy xxxx.com 2017\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" } } } expandable-chapters # Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "},"src/other/end.html":{"url":"src/other/end.html","title":"写在结尾","keywords":"","body":"写在结尾 首先当然肯定是感谢您在百忙之中抽出宝贵的时间来阅读我的文章 也不知道是 是顶着多大的压力, 才能把一个不善于写作的前端的文章看完. 送上一个大大的👍 Copyright © amujoe.top 2017 all right reserved，powered by Gitbook该文件修订时间: 2020.11.03 11:42:49 new Valine({el: \"#vcomments\",appId: 'WSNClLn5HMcSQEIr0kA2FIth-gzGzoHsz',appKey: 'Wsy0deUM3lITyg69tocejOvn',placeholder: '骚客, 你来啦',avatar: '',meta: undefined,pageSize: 10,lang: 'zh-CN',recordIP: false}) "}}